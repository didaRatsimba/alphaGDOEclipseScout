/**
 * 
 */
package mg.alpha.gestion.operations.shared.ui.desktop.outlines.pages.forms.operations;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Map;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.ValidationRule;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

import mg.alpha.gestion.operations.shared.services.code.DeviseCodeType;
import mg.alpha.gestion.operations.shared.services.code.TypeLitteralCodeType;
import mg.alpha.gestion.operations.shared.services.lookup.compte.CompteLookupCall;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class CreerOperationFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public CreerOperationFormData() {
  }

  public ChoixCompteGroup getChoixCompteGroup() {
    return getFieldByClass(ChoixCompteGroup.class);
  }

  public CompteCree getCompteCree() {
    return getFieldByClass(CompteCree.class);
  }

  public CompteExistant getCompteExistant() {
    return getFieldByClass(CompteExistant.class);
  }

  /**
   * access method for property CompteId.
   */
  public Long getCompteId() {
    return getCompteIdProperty().getValue();
  }

  /**
   * access method for property CompteId.
   */
  public void setCompteId(Long compteId) {
    getCompteIdProperty().setValue(compteId);
  }

  public CompteIdProperty getCompteIdProperty() {
    return getPropertyByClass(CompteIdProperty.class);
  }

  /**
   * access method for property CompteLabel.
   */
  public String getCompteLabel() {
    return getCompteLabelProperty().getValue();
  }

  /**
   * access method for property CompteLabel.
   */
  public void setCompteLabel(String compteLabel) {
    getCompteLabelProperty().setValue(compteLabel);
  }

  public CompteLabelProperty getCompteLabelProperty() {
    return getPropertyByClass(CompteLabelProperty.class);
  }

  /**
   * access method for property ComptesPartages.
   */
  public String getComptesPartages() {
    return getComptesPartagesProperty().getValue();
  }

  /**
   * access method for property ComptesPartages.
   */
  public void setComptesPartages(String comptesPartages) {
    getComptesPartagesProperty().setValue(comptesPartages);
  }

  public ComptesPartagesProperty getComptesPartagesProperty() {
    return getPropertyByClass(ComptesPartagesProperty.class);
  }

  public CoursColumnHeader getCoursColumnHeader() {
    return getFieldByClass(CoursColumnHeader.class);
  }

  public DateOperation getDateOperation() {
    return getFieldByClass(DateOperation.class);
  }

  /**
   * access method for property DebitParOperationMap.
   */
  public Map<Long, BigDecimal> getDebitParOperationMap() {
    return getDebitParOperationMapProperty().getValue();
  }

  /**
   * access method for property DebitParOperationMap.
   */
  public void setDebitParOperationMap(Map<Long, BigDecimal> debitParOperationMap) {
    getDebitParOperationMapProperty().setValue(debitParOperationMap);
  }

  public DebitParOperationMapProperty getDebitParOperationMapProperty() {
    return getPropertyByClass(DebitParOperationMapProperty.class);
  }

  public Designation getDesignation() {
    return getFieldByClass(Designation.class);
  }

  public DeviseGroup getDeviseGroup() {
    return getFieldByClass(DeviseGroup.class);
  }

  public FraisDenvoi getFraisDenvoi() {
    return getFieldByClass(FraisDenvoi.class);
  }

  /**
   * access method for property IdFromTimestamp.
   */
  public Long getIdFromTimestamp() {
    return getIdFromTimestampProperty().getValue();
  }

  /**
   * access method for property IdFromTimestamp.
   */
  public void setIdFromTimestamp(Long idFromTimestamp) {
    getIdFromTimestampProperty().setValue(idFromTimestamp);
  }

  public IdFromTimestampProperty getIdFromTimestampProperty() {
    return getPropertyByClass(IdFromTimestampProperty.class);
  }

  public MontantOperation getMontantOperation() {
    return getFieldByClass(MontantOperation.class);
  }

  public TypeGroup getTypeGroup() {
    return getFieldByClass(TypeGroup.class);
  }

  public static class ChoixCompteGroup extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public ChoixCompteGroup() {
    }
  }

  public static class CompteCree extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public CompteCree() {
    }
  }

  public static class CompteExistant extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public CompteExistant() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.LOOKUP_CALL, CompteLookupCall.class);
      ruleMap.put(ValidationRule.MASTER_VALUE_FIELD, ChoixCompteGroup.class);
      ruleMap.put(ValidationRule.MASTER_VALUE_REQUIRED, true);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }

  public static class CompteIdProperty extends AbstractPropertyData<Long> {

    private static final long serialVersionUID = 1L;

    public CompteIdProperty() {
    }
  }

  public static class CompteLabelProperty extends AbstractPropertyData<String> {

    private static final long serialVersionUID = 1L;

    public CompteLabelProperty() {
    }
  }

  public static class ComptesPartagesProperty extends AbstractPropertyData<String> {

    private static final long serialVersionUID = 1L;

    public ComptesPartagesProperty() {
    }
  }

  public static class CoursColumnHeader extends AbstractValueFieldData<BigDecimal> {

    private static final long serialVersionUID = 1L;

    public CoursColumnHeader() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_VALUE, new BigDecimal("999999999999999999999999999999999999999999999999999999999999"));
      ruleMap.put(ValidationRule.MIN_VALUE, new BigDecimal("0"));
    }
  }

  public static class DateOperation extends AbstractValueFieldData<Date> {

    private static final long serialVersionUID = 1L;

    public DateOperation() {
    }
  }

  public static class DebitParOperationMapProperty extends AbstractPropertyData<Map<Long, BigDecimal>> {

    private static final long serialVersionUID = 1L;

    public DebitParOperationMapProperty() {
    }
  }

  public static class Designation extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Designation() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class DeviseGroup extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DeviseGroup() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.CODE_TYPE, DeviseCodeType.class);
    }
  }

  public static class FraisDenvoi extends AbstractValueFieldData<Integer> {

    private static final long serialVersionUID = 1L;

    public FraisDenvoi() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_VALUE, Integer.MAX_VALUE);
      ruleMap.put(ValidationRule.MIN_VALUE, Integer.MIN_VALUE);
    }
  }

  public static class IdFromTimestampProperty extends AbstractPropertyData<Long> {

    private static final long serialVersionUID = 1L;

    public IdFromTimestampProperty() {
    }
  }

  public static class MontantOperation extends AbstractValueFieldData<BigDecimal> {

    private static final long serialVersionUID = 1L;

    public MontantOperation() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_VALUE, new BigDecimal("999999999999999999999999999999999999999999999999999999999999"));
      ruleMap.put(ValidationRule.MIN_VALUE, new BigDecimal("0"));
    }
  }

  public static class TypeGroup extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public TypeGroup() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.CODE_TYPE, TypeLitteralCodeType.class);
    }
  }
}